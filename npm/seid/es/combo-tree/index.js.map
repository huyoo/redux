{"version":3,"sources":["combo-tree/index.jsx"],"names":["React","PropTypes","isEqual","cls","Select","Input","Skeleton","Empty","Tree","ScrollBar","objectAssignAppend","request","setCursorPosition","Search","TreeNode","childFieldKey","ComboTree","props","loaded","data","quickSearchValue","hideComboList","e","comboList","contains","target","setState","showTree","showComboList","store","getData","getReaderData","obj","reader","getReader","readerField","s","split","d","i","length","Array","cascadeParams","params","superParams","loadData","afterLoaded","url","type","methodType","loading","method","then","res","success","resultData","ds","treeData","Function","onClearValue","afterClear","form","name","field","value","undefined","forEach","f","setFieldsValue","filterNodes","filterName","valueKey","expandedKeys","childKey","newArr","treeNode","nodeChildren","fieldValue","toLowerCase","indexOf","push","getRowKey","ab","getLocalFilterData","expKeys","state","newData","searchValue","onExpand","autoExpandParent","onSearchChange","focus","searchInput","input","onSearch","initComboList","ref","width","parentNode","style","item","rowKey","key","Error","getItemBySelectedKeys","selectedKeys","nodeData","getTreeNodeByKey","treeNodes","node","onSelect","afterSelect","selected","selectNodes","formData","getFieldsValue","idx","renderTreeNodes","map","readerName","readerValue","readerChildren","beforeStr","substr","afterStr","title","color","defaultValue","dataSource","defaultV","defaultSelectedKeys","document","addEventListener","autoLoad","removeEventListener","prevProps","allowClear","disabled","showSearch","searchPlaceHolder","placeholder","className","selectRestProps","ele","select","PRESENTED_IMAGE_SIMPLE","Component","defaultProps","searchProperties","propTypes","object","bool","any","classNames","string","shape","oneOf","array","isRequired","number","func"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport isEqual from 'react-fast-compare';\nimport cls from 'classnames';\nimport Select from 'antd/es/select';\nimport Input from 'antd/es/input';\nimport Skeleton from 'antd/es/skeleton';\nimport Empty from 'antd/es/empty';\nimport Tree from 'antd/es/tree';\nimport ScrollBar from '../scroll-bar';\nimport { objectAssignAppend, request, setCursorPosition } from '../utils';\nconst { Search } = Input;\nconst { TreeNode } = Tree;\nconst childFieldKey = 'children';\nclass ComboTree extends React.Component {\n    constructor(props) {\n        super(props);\n        this.loaded = false;\n        this.data = [];\n        this.quickSearchValue = \"\";\n        this.hideComboList = (e) => {\n            if (this.comboList && !this.comboList.contains(e.target)) {\n                this.setState({ showTree: false });\n            }\n        };\n        this.showComboList = (showTree) => {\n            if (showTree) {\n                const { store } = this.props;\n                if (store) {\n                    this.getData();\n                }\n                this.setState({ showTree });\n            }\n        };\n        this.getReaderData = (obj) => {\n            const { reader } = this.props;\n            let data = [];\n            if (reader.data) {\n                data = this.getReader(reader.data, obj) || [];\n            }\n            return data;\n        };\n        this.getReader = (readerField, obj) => {\n            let data = null;\n            if (obj && typeof obj === 'object' && readerField) {\n                const s = readerField.split('.');\n                let d = obj[s[0]];\n                for (let i = 1; i < s.length; i++) {\n                    d = d[s[i]];\n                    if (d instanceof Array && d.length > 0 && i < s.length - 1) {\n                        d = d[0];\n                    }\n                }\n                if (d) {\n                    data = d;\n                }\n            }\n            return data;\n        };\n        this.getData = () => {\n            const { cascadeParams, store } = this.props;\n            const { params } = store || {};\n            const superParams = Object.assign({}, (params || {}));\n            if (cascadeParams) {\n                this.loaded = false;\n                objectAssignAppend(superParams, cascadeParams);\n            }\n            if (!this.loaded) {\n                this.loadData(superParams);\n            }\n        };\n        this.loadData = (params) => {\n            const { store, afterLoaded, reader } = this.props;\n            const { url, type } = store || {};\n            const methodType = type || 'GET';\n            this.setState({ loading: true });\n            if (url) {\n                request({\n                    method: methodType,\n                    url,\n                    data: params,\n                })\n                    .then((res) => {\n                    if (res.success) {\n                        const resultData = res.data || [];\n                        let ds = [];\n                        if (reader && reader.data) {\n                            ds = this.getReaderData(resultData);\n                        }\n                        else if (resultData instanceof Array) {\n                            ds = resultData;\n                        }\n                        this.data = ds;\n                        this.setState({\n                            treeData: [...ds],\n                        });\n                        if (afterLoaded && afterLoaded instanceof Function) {\n                            afterLoaded(ds);\n                        }\n                    }\n                })\n                    .finally(() => {\n                    this.loaded = true;\n                    this.setState({ loading: false });\n                });\n            }\n        };\n        this.onClearValue = () => {\n            const { afterClear, form, name, reader, field = [] } = this.props;\n            this.setState({\n                value: undefined,\n            }, () => {\n                const data = { [name]: null };\n                if (reader && reader.field && field.length === reader.field.length) {\n                    field.forEach(f => {\n                        data[f] = null;\n                    });\n                }\n                if (form) {\n                    form.setFieldsValue(data);\n                }\n                if (afterClear && afterClear instanceof Function) {\n                    afterClear();\n                }\n            });\n        };\n        this.filterNodes = (filterName, valueKey, treeData, expandedKeys) => {\n            const { reader } = this.props;\n            const { childKey } = reader;\n            const newArr = [];\n            treeData.forEach(treeNode => {\n                const nodeChildren = treeNode[childKey || childFieldKey];\n                const fieldValue = this.getReader(filterName, treeNode);\n                if (fieldValue.toLowerCase().indexOf(valueKey) > -1) {\n                    newArr.push(treeNode);\n                    expandedKeys.push(this.getRowKey(treeNode));\n                }\n                else if (nodeChildren && nodeChildren.length > 0) {\n                    const ab = this.filterNodes(filterName, valueKey, nodeChildren, expandedKeys);\n                    const obj = Object.assign(Object.assign({}, treeNode), { [childKey || childFieldKey]: ab });\n                    if (ab && ab.length > 0) {\n                        newArr.push(obj);\n                    }\n                }\n            });\n            return newArr;\n        };\n        this.getLocalFilterData = () => {\n            const { expandedKeys: expKeys } = this.state;\n            const { reader, name } = this.props;\n            let newData = [...this.data];\n            const expandedKeys = [...expKeys];\n            const searchValue = this.quickSearchValue;\n            if (searchValue) {\n                let filterName = name;\n                if (reader && reader.name) {\n                    filterName = reader.name;\n                }\n                newData = this.filterNodes(filterName, searchValue.toLowerCase(), newData, expandedKeys);\n            }\n            return { treeData: newData, expandedKeys };\n        };\n        this.onExpand = (expandedKeys) => {\n            this.setState({\n                expandedKeys,\n                autoExpandParent: false,\n            });\n        };\n        this.onSearchChange = (e) => {\n            this.quickSearchValue = e.target.value;\n        };\n        this.focus = () => {\n            if (this.searchInput && this.searchInput.input) {\n                setCursorPosition(this.searchInput.input.input, this.quickSearchValue.length);\n            }\n        };\n        this.onSearch = () => {\n            const { treeData, expandedKeys } = this.getLocalFilterData();\n            this.setState({\n                treeData,\n                expandedKeys,\n            }, this.focus);\n        };\n        this.initComboList = (ref) => {\n            if (ref) {\n                const { width } = this.props;\n                this.comboList = ref;\n                if (width && width > 0) {\n                    ref.parentNode.style.width = `${width}px`;\n                }\n            }\n        };\n        this.getRowKey = (item) => {\n            const { rowKey } = this.props;\n            let key;\n            if (typeof rowKey === 'function') {\n                key = rowKey(item);\n            }\n            else if (typeof rowKey === 'string') {\n                key = item[rowKey];\n            }\n            else {\n                key = item.key;\n            }\n            if (!key) {\n                throw new Error('rowKey is empty');\n            }\n            return key;\n        };\n        this.getItemBySelectedKeys = (selectedKeys) => {\n            const nodeData = [];\n            for (let i = 0; i < selectedKeys.length; i++) {\n                this.getTreeNodeByKey(this.data, nodeData, selectedKeys[i]);\n            }\n            return nodeData;\n        };\n        this.getTreeNodeByKey = (treeNodes, nodeData, key) => {\n            const { reader } = this.props;\n            const { childKey } = reader;\n            for (let i = 0; i < treeNodes.length; i += 1) {\n                const node = treeNodes[i];\n                const rowKey = this.getRowKey(node);\n                const nodeChildren = node[childKey || childFieldKey];\n                if (rowKey === key) {\n                    nodeData.push(node);\n                }\n                if (nodeChildren && nodeChildren.length > 0) {\n                    this.getTreeNodeByKey(nodeChildren, nodeData, key);\n                }\n            }\n        };\n        this.onSelect = (selectedKeys, e) => {\n            const { afterSelect, reader, form, name, field = [] } = this.props;\n            if (e.selected) {\n                const selectNodes = this.getItemBySelectedKeys(selectedKeys);\n                const item = selectNodes.length > 0 ? selectNodes[0] : null;\n                this.setState({\n                    showTree: false,\n                    value: this.getReader(reader.name, item),\n                }, () => {\n                    const data = { [name]: this.getReader(reader.name, item) };\n                    const formData = form ? form.getFieldsValue() : {};\n                    if (reader && reader.field && field.length > 0 && field.length === reader.field.length) {\n                        field.forEach((f, idx) => {\n                            data[f] = this.getReader(reader.field ? reader.field[idx] : '', item);\n                        });\n                    }\n                    Object.assign(formData, data);\n                    if (form) {\n                        form.setFieldsValue(formData);\n                    }\n                    if (afterSelect) {\n                        afterSelect(item);\n                    }\n                });\n            }\n        };\n        this.renderTreeNodes = (data) => {\n            const { reader } = this.props;\n            const searchValue = this.quickSearchValue;\n            return data.map(item => {\n                const { name: readerName, childKey } = reader;\n                const readerValue = item[readerName];\n                const readerChildren = item[childKey || childFieldKey];\n                const i = readerValue.toLowerCase().indexOf(searchValue.toLowerCase());\n                const beforeStr = readerValue.substr(0, i);\n                const afterStr = readerValue.substr(i + searchValue.length);\n                const title = i > -1 ? (<span>\n            {beforeStr}\n            <span style={{ color: '#f50' }}>{searchValue}</span>\n            {afterStr}\n          </span>) : (<span>{readerValue}</span>);\n                if (readerChildren && readerChildren.length > 0) {\n                    return (<TreeNode title={title} key={this.getRowKey(item)}>\n            {this.renderTreeNodes(readerChildren)}\n          </TreeNode>);\n                }\n                return <TreeNode title={title} key={this.getRowKey(item)}/>;\n            });\n        };\n        const { defaultValue, value, dataSource = [] } = props;\n        const defaultV = value || defaultValue || undefined;\n        this.loaded = false;\n        this.data = [...dataSource];\n        this.state = {\n            value: defaultV,\n            loading: false,\n            showTree: false,\n            treeData: dataSource,\n            autoExpandParent: true,\n            defaultSelectedKeys: [],\n            expandedKeys: [],\n        };\n    }\n    componentDidMount() {\n        document.addEventListener('mousedown', this.hideComboList, false);\n        const { store } = this.props;\n        if (store && store.autoLoad === true) {\n            this.getData();\n        }\n    }\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.hideComboList);\n    }\n    componentDidUpdate(prevProps) {\n        if (!isEqual(prevProps.cascadeParams, this.props.cascadeParams) ||\n            !isEqual(prevProps.value, this.props.value)) {\n            const { defaultValue, value } = this.props;\n            const defaultV = value || defaultValue || undefined;\n            this.setState({\n                value: defaultV,\n            });\n        }\n    }\n    render() {\n        const { treeData, loading, value, showTree, expandedKeys, autoExpandParent, defaultSelectedKeys, } = this.state;\n        const { allowClear, disabled, showSearch, searchPlaceHolder, placeholder, style = {}, className, } = this.props;\n        const selectRestProps = { style, className };\n        Object.assign(selectRestProps, { value });\n        return (<Select ref={ele => (this.select = ele)} onDropdownVisibleChange={this.showComboList} open={showTree} allowClear={allowClear} placeholder={placeholder} onChange={this.onClearValue} disabled={disabled} {...selectRestProps} dropdownRender={() => (<div className={cls('seid-combo-tree')} ref={ref => this.initComboList(ref)}>\n            {showSearch ? (<div className=\"action-bar\">\n                <Search ref={node => (this.searchInput = node)} placeholder={searchPlaceHolder} onChange={this.onSearchChange} onSearch={this.onSearch} onPressEnter={this.onSearch}/>\n              </div>) : null}\n            <div className=\"list-body\">\n              <Skeleton loading={loading} active>\n                <ScrollBar>\n                  {treeData && treeData.length === 0 ? (<Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>) : (<Tree autoExpandParent={autoExpandParent} expandedKeys={expandedKeys} defaultSelectedKeys={defaultSelectedKeys} onExpand={this.onExpand} onSelect={this.onSelect}>\n                      {this.renderTreeNodes(treeData)}\n                    </Tree>)}\n                </ScrollBar>\n              </Skeleton>\n            </div>\n          </div>)}/>);\n    }\n}\nComboTree.defaultProps = {\n    disabled: false,\n    showSearch: true,\n    store: null,\n    dataSource: [],\n    allowClear: false,\n    placeholder: '',\n    searchPlaceHolder: '',\n    searchProperties: ['code', 'name'],\n    rowKey: 'id',\n    name: '',\n    field: [],\n};\nComboTree.propTypes = {\n    cascadeParams: PropTypes.object,\n    disabled: PropTypes.bool,\n    value: PropTypes.any,\n    defaultValue: PropTypes.any,\n    allowClear: PropTypes.bool,\n    classNames: PropTypes.string,\n    placeholder: PropTypes.string,\n    store: PropTypes.shape({\n        type: PropTypes.oneOf(['GET', 'POST']),\n        url: PropTypes.string,\n        params: PropTypes.object,\n        autoLoad: PropTypes.bool,\n    }),\n    reader: PropTypes.shape({\n        data: PropTypes.string,\n        name: PropTypes.string,\n        field: PropTypes.array,\n        childKey: PropTypes.string,\n    }).isRequired,\n    showSearch: PropTypes.bool,\n    width: PropTypes.number,\n    searchPlaceHolder: PropTypes.string,\n    searchProperties: PropTypes.array,\n    dataSource: PropTypes.array,\n    afterLoaded: PropTypes.func,\n    afterSelect: PropTypes.func,\n    afterClear: PropTypes.func,\n    rowKey: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    field: PropTypes.array,\n};\nexport default ComboTree;\n"],"file":"index.js"}