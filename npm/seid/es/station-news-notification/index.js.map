{"version":3,"sources":["station-news-notification/index.jsx"],"names":["React","PureComponent","SockJS","Stomp","Icon","notification","message","Detail","defaultLocale","SeidLocaleReceiver","stompClient","StationNewsNotification","arguments","state","visible","data","userId","groupId","getCountUrl","disconnect","defaultIcon","type","color","openNotification","result","notificationParmas","props","iconTypeConfig","messageKey","descriptionKey","needDetail","messageTitle","setState","socketParams","callback","content","__html","messageContent","open","description","onClick","icon","messageType","style","width","marginLeft","onCancel","renderCom","locale","getNewsDetailUrl","getNewsDetailUrlRequestMethod","propsToDetail","params","messageId","modalProps","customNotificationTemplate","socketUrl","socket","over","self","connect","subscribe","res","body","JSON","parse","error","console"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport SockJS from 'sockjs-client';\n// @ts-ignore\nimport { Stomp } from 'stompjs/lib/stomp';\nimport Icon from 'antd/es/icon';\nimport notification from 'antd/es/notification';\nimport message from 'antd/es/message';\nimport Detail from '../station-news-list/detail';\nimport defaultLocale from './locale';\nimport SeidLocaleReceiver from '../seid-locale-receiver';\nlet stompClient = null;\nclass StationNewsNotification extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            visible: false,\n            data: {},\n        };\n        this.userId = '';\n        this.groupId = '';\n        this.getCountUrl = '/mq-app/seo/socket/count';\n        // 关闭双通道(必须要关闭)\n        this.disconnect = () => {\n            if (stompClient != null) {\n                stompClient.disconnect(() => { });\n            }\n        };\n        // messageType-类型[0-系统 1-群组 2-个人 空-全部]\n        this.defaultIcon = (type) => {\n            switch (type) {\n                case '0':\n                    return <Icon type=\"setting\" style={{ color: '#faad14' }}/>;\n                case '1':\n                    return <Icon type=\"usergroup-add\" style={{ color: '#1890ff' }}/>;\n                case '2':\n                    return <Icon type=\"user\" style={{ color: '#52c41a' }}/>;\n                default:\n                    break;\n            }\n        };\n        this.openNotification = (result) => {\n            const { data } = result;\n            const { notificationParmas } = this.props;\n            const { iconTypeConfig, messageKey, descriptionKey, needDetail = true } = notificationParmas;\n            if (!data.messageTitle)\n                return;\n            this.setState({ data });\n            const { socketParams } = this.props;\n            const { callback } = socketParams;\n            if (callback)\n                callback(data);\n            const content = descriptionKey ? (data[descriptionKey]) : (<div dangerouslySetInnerHTML={{ __html: data.messageContent }}/>);\n            notification.open(Object.assign({ message: data[messageKey || 'messageTitle'], description: <div className=\"station-news-notification-content\">{content}</div>, onClick: () => {\n                    if (needDetail)\n                        this.setState({ visible: true });\n                }, icon: iconTypeConfig ? iconTypeConfig(data.messageType) : this.defaultIcon(data.messageType), style: {\n                    width: 520,\n                    marginLeft: 335 - 520,\n                } }, notificationParmas));\n        };\n        this.onCancel = () => {\n            this.setState({ visible: false });\n        };\n        this.renderCom = (locale) => {\n            const { visible, data } = this.state;\n            const { notificationParmas } = this.props;\n            const { getNewsDetailUrl, getNewsDetailUrlRequestMethod } = notificationParmas;\n            const propsToDetail = {\n                getNewsDetailUrl,\n                getNewsDetailUrlRequestMethod,\n                visible,\n                params: {\n                    userId: this.userId,\n                    messageId: data.messageId,\n                },\n                onCancel: this.onCancel,\n                modalProps: { width: 800 },\n            };\n            return visible && <Detail locale={locale} {...propsToDetail}/>;\n        };\n    }\n    componentDidMount() {\n        const { socketParams, notificationParmas } = this.props;\n        const { customNotificationTemplate } = notificationParmas || {};\n        const { userId, groupId, socketUrl, getCountUrl } = socketParams || {};\n        this.userId = userId;\n        this.groupId = groupId;\n        this.getCountUrl = getCountUrl;\n        // 建立连接对象（还未发起连接）\n        const socket = new SockJS(socketUrl);\n        // 获取 STOMP 子协议的客户端对象\n        stompClient = Stomp.over(socket);\n        const self = this;\n        // 向服务器发起websocket连接并发送CONNECT帧\n        stompClient.connect({}, () => {\n            // 连接成功时（服务器响应 CONNECTED 帧）的回调方法\n            // 监听个人消息消息\n            stompClient.subscribe(`/mq-user/${userId}/seo/inbox`, function (res) {\n                const content = res.body ? JSON.parse(res.body) : {};\n                if (customNotificationTemplate) {\n                    customNotificationTemplate(content);\n                }\n                else {\n                    self.openNotification(content);\n                }\n            });\n            // 监听系统消息\n            stompClient.subscribe('/mq-topic/seo/message', function (res) {\n                const content = res.body ? JSON.parse(res.body) : {};\n                if (customNotificationTemplate) {\n                    customNotificationTemplate(content);\n                }\n                else {\n                    self.openNotification(content);\n                }\n            });\n            // 监听群组消息\n            stompClient.subscribe(`/mq-user/${groupId}/seo/inbox`, function (res) {\n                const content = res.body ? JSON.parse(res.body) : {};\n                if (customNotificationTemplate) {\n                    customNotificationTemplate(content);\n                }\n                else {\n                    self.openNotification(content);\n                }\n            });\n        }, (error) => {\n            console.error('error', error);\n            // 连接失败时（服务器响应 ERROR 帧）的回调方法\n            message.error('连接失败');\n        });\n    }\n    componentWillUnmount() {\n        this.disconnect();\n    }\n    render() {\n        return (<SeidLocaleReceiver componentName=\"StationNewsNotification\" defaultLocale={defaultLocale}>\n        {this.renderCom}\n      </SeidLocaleReceiver>);\n    }\n}\nexport default StationNewsNotification;\n"],"file":"index.js"}