{"version":3,"sources":["ext-modal/DragWrapper.jsx"],"names":["React","cloneElement","ReactDOM","Modal","DragM","deepTraversal","node","className","target","children","i","length","tempClassName","includes","childElementCount","DragWrapper","arguments","getCurrentNode","curNode","findDOMNode","ref","findDomByClassName","HTMLElement","parentElement","updateTransform","transformStr","modalDom","style","transform","container","props","type","visible","setTimeout","position","dx","dy","Children","only","getContainer","inst","Component"],"mappings":"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","sourcesContent":["/*\n * @Author: zp\n * @Date:   2019-07-02 16:11:15\n * @Last Modified by:   zp\n * @Last Modified time: 2019-09-11 17:46:19\n */\nimport React, { cloneElement } from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'antd/es/modal';\nimport DragM from './DragM';\nconst deepTraversal = (node, className) => {\n    let target = null;\n    if (node !== null) {\n        const children = node.children;\n        for (let i = 0; i < children.length; i++) {\n            const tempClassName = children[i].className;\n            if (tempClassName && tempClassName.includes(className)) {\n                target = children[i];\n                break;\n            }\n            if (children[i].childElementCount) {\n                return deepTraversal(children[i], className);\n            }\n        }\n    }\n    return target;\n};\nexport default class DragWrapper extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getCurrentNode = () => {\n            this.curNode = ReactDOM.findDOMNode(this.ref);\n        };\n        /** 根据类名获取祖先dom */\n        this.findDomByClassName = (className) => {\n            // 向下\n            if (this.curNode && this.curNode instanceof HTMLElement) {\n                const target = deepTraversal(this.curNode, className);\n                if (target) {\n                    return target;\n                }\n            }\n            // 向上\n            if (this.curNode && this.curNode instanceof HTMLElement) {\n                let node = this.curNode ? this.curNode.parentElement : this.curNode;\n                while (node) {\n                    const tempClassName = node.className;\n                    if (tempClassName && tempClassName.includes(className)) {\n                        return node;\n                    }\n                    node = node.parentElement;\n                }\n            }\n            return null;\n        };\n        this.updateTransform = (transformStr) => {\n            if (this.modalDom && this.modalDom instanceof HTMLElement) {\n                const { style } = this.modalDom;\n                style.transform = transformStr;\n            }\n        };\n    }\n    componentDidMount() {\n        this.getCurrentNode();\n        this.modalDom = this.findDomByClassName('ant-modal-content');\n        this.container = ReactDOM.findDOMNode(this.ref);\n    }\n    render() {\n        const { children } = this.props;\n        if (children && children.type === Modal) {\n            const { visible } = children.props;\n            if (visible) {\n                setTimeout(() => {\n                    this.modalDom = this.findDomByClassName('ant-modal-content');\n                    const { position = {} } = this.ref || {};\n                    const { dx, dy } = position;\n                    if (dx && dy) {\n                        this.updateTransform(`translate(${dx}px,${dy}px)`);\n                    }\n                }, 0);\n            }\n            const node = cloneElement(React.Children.only(children), {\n                getContainer: () => this.container,\n            });\n            return (<DragM ref={(inst) => {\n                this.ref = inst;\n            }} updateTransform={this.updateTransform}>\n          <div>{node}</div>\n        </DragM>);\n        }\n        return (<DragM ref={(inst) => {\n            this.ref = inst;\n        }} updateTransform={this.updateTransform}>\n        <div>{children}</div>\n      </DragM>);\n    }\n}\n"],"file":"DragWrapper.js"}