{"version":3,"sources":["seid-locale-receiver/index.jsx"],"names":["React","PropTypes","defaultLocaleData","seidLocaleData","SeidLocaleReceiver","props","componentName","defaultLocale","locale","antLocale","context","localeCode","localeFromContext","exist","getLocaleCode","children","getLocale","Component","defaultProps","contextTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,iBAAP,MAA8B,WAA9B;AACA,OAAOC,cAAP,MAA2B,cAA3B;;IACqBC,kB;;;;;;;;;;;;;gCACL;AAAA,wBACiC,KAAKC,KADtC;AAAA,UACAC,aADA,eACAA,aADA;AAAA,UACeC,aADf,eACeA,aADf;AAER,UAAMC,MAAM,GAAGD,aAAa,IAAIL,iBAAiB,CAACI,aAAa,IAAI,QAAlB,CAAjD;AAFQ,UAGAG,SAHA,GAGc,KAAKC,OAHnB,CAGAD,SAHA;;AAIR,UAAIA,SAAJ,EAAe;AAAA,gCAC8BA,SAD9B,CACHD,MADG;AAAA,YACKG,UADL,kCACkB,OADlB;AAEX,YAAMC,iBAAiB,GAAGN,aAAa,IAAIH,cAAjB,GAAkCA,cAAc,CAACQ,UAAD,CAAd,CAA2BL,aAA3B,CAAlC,GAA8E,EAAxG;AACA,eAAO,SAAc,SAAc,EAAd,EAAmB,OAAOE,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0CA,MAA7D,CAAd,EAAsFI,iBAAiB,IAAI,EAA3G,CAAP;AACH;;AACD,aAAO,SAAc,EAAd,EAAmB,OAAOJ,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0CA,MAA7D,CAAP;AACH;;;oCACe;AAAA,UACJC,SADI,GACU,KAAKC,OADf,CACJD,SADI;AAEZ,UAAME,UAAU,GAAGF,SAAS,IAAIA,SAAS,CAACD,MAA1C,CAFY,CAGZ;;AACA,UAAIC,SAAS,IAAIA,SAAS,CAACI,KAAvB,IAAgC,CAACF,UAArC,EAAiD;AAC7C,eAAOT,iBAAiB,CAACM,MAAzB;AACH;;AACD,aAAOG,UAAP;AACH,K,CACD;AACA;AACA;;;;6BACS;AACL,UAAMA,UAAU,GAAG,KAAKG,aAAL,EAAnB,CADK,CAEL;;AACA,aAAO,KAAKT,KAAL,CAAWU,QAAX,CAAoB,KAAKC,SAAL,EAApB,EAAsCL,UAAtC,EAAkD,KAAKD,OAAL,CAAaD,SAA/D,CAAP;AACH;;;;EA5B2CT,KAAK,CAACiB,S;;SAAjCb,kB;AA8BrBA,kBAAkB,CAACc,YAAnB,GAAkC;AAC9BZ,EAAAA,aAAa,EAAE;AADe,CAAlC;AAGAF,kBAAkB,CAACe,YAAnB,GAAkC;AAC9BV,EAAAA,SAAS,EAAER,SAAS,CAACmB;AADS,CAAlC","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport defaultLocaleData from './default';\nimport seidLocaleData from './seidLocale';\nexport default class SeidLocaleReceiver extends React.Component {\n    getLocale() {\n        const { componentName, defaultLocale } = this.props;\n        const locale = defaultLocale || defaultLocaleData[componentName || 'global'];\n        const { antLocale } = this.context;\n        if (antLocale) {\n            const { locale: localeCode = 'zh-cn' } = antLocale;\n            const localeFromContext = componentName && seidLocaleData ? seidLocaleData[localeCode][componentName] : {};\n            return Object.assign(Object.assign({}, (typeof locale === 'function' ? locale() : locale)), (localeFromContext || {}));\n        }\n        return Object.assign({}, (typeof locale === 'function' ? locale() : locale));\n    }\n    getLocaleCode() {\n        const { antLocale } = this.context;\n        const localeCode = antLocale && antLocale.locale;\n        // Had use LocaleProvide but didn't set locale\n        if (antLocale && antLocale.exist && !localeCode) {\n            return defaultLocaleData.locale;\n        }\n        return localeCode;\n    }\n    // changeLocaleCode = (/* localeCode: string */) => {\n    // empty\n    // };\n    render() {\n        const localeCode = this.getLocaleCode();\n        // this.changeLocaleCode(localeCode);\n        return this.props.children(this.getLocale(), localeCode, this.context.antLocale);\n    }\n}\nSeidLocaleReceiver.defaultProps = {\n    componentName: 'global',\n};\nSeidLocaleReceiver.contextTypes = {\n    antLocale: PropTypes.object,\n};\n"],"file":"index.js"}