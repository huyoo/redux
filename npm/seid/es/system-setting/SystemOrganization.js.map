{"version":3,"sources":["system-setting/SystemOrganization.jsx"],"names":["React","Button","Spin","Tree","Row","Col","Card","apiConfig","appConfig","defaultHeader","convertListToTreeJson","request","TreeNode","SystemOrganization","props","init","initTreeData","setState","loading","url","rui","basic","organization","getAllOrganizations","params","pageIndex","pageSize","maxPageSize","then","res","success","data","orgs","list","length","treeData","initSystemSetOrgs","state","systemSet","setting","findById","settingId","checkedKeys","structure","resItem","push","structureId","renderTreeNodes","map","item","subStructure","structureName","handleTreeCheck","handelCancel","goBack","handelSave","method","resetStructures","headers","structureIds","join","removeTabPane","paneKey","nextProps","justifyContent","sysName","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from 'antd/es/button';\nimport Spin from 'antd/es/spin';\nimport Tree from 'antd/es/tree';\nimport Row from 'antd/es/row';\nimport Col from 'antd/es/col';\nimport Card from 'antd/es/card';\nimport { apiConfig, appConfig, defaultHeader } from './setting';\nimport { convertListToTreeJson, request } from '../utils';\nconst { TreeNode } = Tree;\nclass SystemOrganization extends React.Component {\n    constructor(props) {\n        super(props);\n        this.init = () => {\n            this.initTreeData();\n        };\n        this.initTreeData = () => {\n            this.setState({ loading: true });\n            request({\n                url: apiConfig.rui.basic.organization.getAllOrganizations,\n                params: {\n                    pageIndex: 0,\n                    pageSize: appConfig.maxPageSize,\n                },\n            })\n                .then((res) => {\n                if (res.success) {\n                    const { data = {} } = res;\n                    let orgs = [];\n                    if (res && data.list && data.list.length > 0) {\n                        orgs = [...data.list];\n                    }\n                    const treeData = convertListToTreeJson(orgs, 'subStructure', 'structureId', 'pLevel');\n                    this.setState({\n                        loading: false,\n                        treeData,\n                    }, () => {\n                        this.initSystemSetOrgs();\n                    });\n                }\n            })\n                .catch(() => {\n                this.setState({ loading: false });\n            });\n        };\n        this.initSystemSetOrgs = () => {\n            this.setState({ loading: true });\n            const { systemSet = {} } = this.state;\n            request({\n                url: apiConfig.rui.setting.findById,\n                params: {\n                    settingId: systemSet.settingId,\n                },\n            })\n                .then((res) => {\n                const checkedKeys = [];\n                if (res.success) {\n                    const { data = {} } = res;\n                    const { structure } = data;\n                    for (const resItem of structure) {\n                        if (resItem) {\n                            checkedKeys.push(resItem.structureId);\n                        }\n                    }\n                }\n                this.setState({\n                    loading: false,\n                    checkedKeys,\n                });\n            })\n                .catch(() => {\n                this.setState({ loading: false });\n            });\n        };\n        this.renderTreeNodes = (data) => data.map(item => {\n            if (item.subStructure) {\n                return (<TreeNode title={item.structureName} key={item.structureId} value={item.structureId} dataRef={item}>\n            {this.renderTreeNodes(item.subStructure)}\n          </TreeNode>);\n            }\n            return (<TreeNode title={item.structureName} key={item.structureId} value={item.structureId} dataRef={item}/>);\n        });\n        this.handleTreeCheck = (checkedKeys) => {\n            this.setState({\n                checkedKeys,\n            });\n        };\n        this.handelCancel = () => {\n            this.goBack();\n        };\n        this.handelSave = () => {\n            this.setState({ loading: true });\n            const { systemSet = {}, checkedKeys = [] } = this.state;\n            request({\n                method: 'post',\n                url: apiConfig.rui.setting.resetStructures,\n                headers: Object.assign({}, defaultHeader),\n                data: {\n                    settingId: systemSet.settingId,\n                    structureIds: checkedKeys.join(','),\n                },\n            })\n                .then(() => {\n                this.setState({\n                    loading: false,\n                }, () => {\n                    this.goBack();\n                });\n            })\n                .catch(() => {\n                this.setState({ loading: false });\n            });\n        };\n        this.goBack = () => {\n            const { removeTabPane, paneKey } = this.props;\n            if (removeTabPane) {\n                removeTabPane(paneKey);\n            }\n        };\n        this.state = {\n            loading: false,\n            systemSet: props.systemSet,\n            treeData: [],\n            checkedKeys: [],\n        };\n    }\n    componentWillMount() {\n        this.init();\n    }\n    componentWillReceiveProps(nextProps) {\n        const { systemSet = {} } = this.props;\n        if (nextProps.systemSet && nextProps.systemSet.settingId !== systemSet.settingId) {\n            this.setState({\n                systemSet: nextProps.systemSet,\n            }, () => {\n                this.initSystemSetOrgs();\n            });\n        }\n    }\n    render() {\n        const { loading, treeData = [], checkedKeys, systemSet = {} } = this.state;\n        return (<Spin spinning={loading}>\n        <Card bordered={false}>\n          <div className=\"operationTitle\" style={{ justifyContent: 'center' }}>\n            <h1>{`设置【${systemSet.sysName}】的组织机构`}</h1>\n          </div>\n          <Row gutter={24}>\n            <Col span={6} offset={4}>\n              \n              <Tree checkable checkedKeys={checkedKeys} onCheck={this.handleTreeCheck}>\n                {this.renderTreeNodes(treeData)}\n              </Tree>\n              \n            </Col>\n          </Row>\n          <Row gutter={24}>\n            <Col span={24} className=\"operationArea\">\n              <Button onClick={this.handelCancel}>取消</Button>\n              <Button type=\"primary\" loading={loading} onClick={this.handelSave}>\n                保存\n              </Button>\n            </Col>\n          </Row>\n        </Card>\n      </Spin>);\n    }\n}\nexport default SystemOrganization;\n"],"file":"SystemOrganization.js"}