{"version":3,"sources":["system-setting/ColorSelect.jsx"],"names":["React","Select","Popover","SketchPicker","Option","ColorSelect","props","colorClick","v","setState","visible","handleInput","value","onChange","colorPick","color","varKey","hex","state","placeholder","triggerNode","parentElement","document","body","lineHeight","height","backgroundColor","display","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Select from 'antd/es/select';\nimport Popover from 'antd/es/popover';\nimport { SketchPicker } from 'react-color';\nconst { Option } = Select;\nclass ColorSelect extends React.PureComponent {\n    // 记录modal上选择的值\n    constructor(props) {\n        super(props);\n        /* 显示隐藏换肤功能面板 */\n        this.colorClick = (v) => {\n            if (v) {\n                this.setState({\n                    visible: true,\n                });\n            }\n        };\n        this.handleInput = (value) => {\n            // 清空输入框的值\n            const { onChange } = this.props;\n            if (onChange && !value) {\n                onChange(null);\n            }\n        };\n        this.colorPick = (color) => {\n            const { onChange, varKey } = this.props;\n            if (onChange) {\n                onChange({ [varKey]: color.hex });\n            }\n        };\n        this.state = {\n            visible: false,\n        };\n    }\n    render() {\n        const { placeholder = '请选择颜色', value } = this.props;\n        const { visible } = this.state;\n        return (<div className=\"pc-check-panel\" id=\"pc-check-panel\">\n        <Popover content={<SketchPicker color={value} onChangeComplete={this.colorPick}/>} placement=\"bottom\" visible={visible} getPopupContainer={triggerNode => triggerNode.parentElement || document.body} onVisibleChange={v => {\n            if (!v) {\n                this.setState({ visible: false });\n            }\n        }}>\n          <Select placeholder={placeholder} value={value} onChange={this.handleInput} allowClear open={false} onDropdownVisibleChange={this.colorClick}>\n            <Option key={value} value={value}>\n              <div style={{ lineHeight: '30px', height: '30px' }}>\n                <span className=\"colorBlock\" style={{ backgroundColor: value }}/>\n                <span style={{ display: 'inline-block' }}>{value}</span>\n              </div>\n            </Option>\n          </Select>\n        </Popover>\n      </div>);\n    }\n}\nexport default ColorSelect;\n"],"file":"ColorSelect.js"}