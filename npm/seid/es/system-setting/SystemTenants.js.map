{"version":3,"sources":["system-setting/SystemTenants.jsx"],"names":["React","Button","Spin","Tree","Row","Col","Card","apiConfig","appConfig","defaultHeader","isNotEmpty","request","TreeNode","SystemTenants","props","init","initTreeData","setState","loading","url","rui","basic","tenant","list","params","pageIndex","pageSize","maxPageSize","then","res","success","data","tenants","length","treeData","initSystemSetTenants","state","systemSet","setting","findById","settingId","checkedKeys","resItem","push","tenantId","renderTreeNodes","map","item","tenantName","handleTreeCheck","handelCancel","goBack","handelSave","tenantIds","checkKey","substr","method","resetTenants","headers","removeTabPane","paneKey","nextProps","justifyContent","sysName","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from 'antd/es/button';\nimport Spin from 'antd/es/spin';\nimport Tree from 'antd/es/tree';\nimport Row from 'antd/es/row';\nimport Col from 'antd/es/col';\nimport Card from 'antd/es/card';\nimport { apiConfig, appConfig, defaultHeader } from './setting';\nimport { isNotEmpty } from '../_util/utils';\nimport { request } from '../utils';\nconst { TreeNode } = Tree;\nclass SystemTenants extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.init = () => {\n            this.initTreeData();\n        };\n        this.initTreeData = () => {\n            this.setState({ loading: true });\n            request({\n                url: apiConfig.rui.basic.tenant.list,\n                params: {\n                    pageIndex: 0,\n                    pageSize: appConfig.maxPageSize,\n                },\n            })\n                .then((res) => {\n                if (res.success) {\n                    const { data = {} } = res;\n                    let tenants = [];\n                    if (data && data.list && data.list.length > 0) {\n                        tenants = [...data.list];\n                    }\n                    this.setState({\n                        loading: false,\n                        treeData: tenants,\n                    }, () => {\n                        this.initSystemSetTenants();\n                    });\n                }\n            })\n                .catch(() => {\n                this.setState({ loading: false });\n            });\n        };\n        this.initSystemSetTenants = () => {\n            this.setState({ loading: true });\n            const { systemSet = {} } = this.state;\n            request({\n                url: apiConfig.rui.setting.findById,\n                params: {\n                    settingId: systemSet.settingId,\n                },\n            })\n                .then((res) => {\n                if (res.success) {\n                    const { data = {} } = res;\n                    const checkedKeys = [];\n                    if (data && data.tenant) {\n                        for (const resItem of data.tenant) {\n                            if (resItem) {\n                                checkedKeys.push(resItem.tenantId);\n                            }\n                        }\n                    }\n                    this.setState({\n                        loading: false,\n                        checkedKeys,\n                    });\n                }\n            })\n                .catch(() => {\n                this.setState({ loading: false });\n            });\n        };\n        this.renderTreeNodes = (data) => data.map(item => {\n            if (item) {\n                return (<TreeNode title={item.tenantName} key={item.tenantId} value={item.tenantId} dataRef={item}/>);\n            }\n            return null;\n        });\n        this.handleTreeCheck = (checkedKeys) => {\n            this.setState({\n                checkedKeys,\n            });\n        };\n        this.handelCancel = () => {\n            this.goBack();\n        };\n        this.handelSave = () => {\n            let tenantIds = '';\n            for (const checkKey of this.state.checkedKeys) {\n                tenantIds += `${checkKey},`;\n            }\n            if (isNotEmpty(tenantIds)) {\n                tenantIds = tenantIds.substr(0, tenantIds.length - 1);\n            }\n            this.setState({ loading: true });\n            const { systemSet = {} } = this.state;\n            request({\n                method: 'post',\n                url: apiConfig.rui.setting.resetTenants,\n                headers: Object.assign({}, defaultHeader),\n                data: {\n                    settingId: systemSet.settingId,\n                    tenantIds,\n                },\n            })\n                .then(() => {\n                this.setState({\n                    loading: false,\n                }, () => {\n                    this.goBack();\n                });\n            })\n                .catch(() => {\n                this.setState({ loading: false });\n            });\n        };\n        this.goBack = () => {\n            const { removeTabPane, paneKey } = this.props;\n            if (removeTabPane) {\n                removeTabPane(paneKey);\n            }\n        };\n        this.state = {\n            loading: false,\n            systemSet: props.systemSet,\n            treeData: [],\n            checkedKeys: [],\n        };\n    }\n    componentWillMount() {\n        this.init();\n    }\n    componentWillReceiveProps(nextProps) {\n        const { systemSet = {} } = this.props;\n        if (nextProps.systemSet && nextProps.systemSet.settingId !== systemSet.settingId) {\n            this.setState({\n                systemSet: nextProps.systemSet,\n            }, () => {\n                this.initSystemSetTenants();\n            });\n        }\n    }\n    render() {\n        const { loading, treeData, checkedKeys, systemSet = {} } = this.state;\n        return (<Spin spinning={loading}>\n        <Card bordered={false}>\n          <div className=\"operationTitle\" style={{ justifyContent: 'center' }}>\n            <h1>{`设置【${systemSet.sysName}】的租户`}</h1>\n          </div>\n          <Row gutter={24}>\n            <Col span={6} offset={4}>\n              <Tree checkable checkedKeys={checkedKeys} onCheck={this.handleTreeCheck}>\n                {this.renderTreeNodes(treeData)}\n              </Tree>\n            </Col>\n          </Row>\n          <Row gutter={24}>\n            <Col span={24} className=\"operationArea\">\n              <Button onClick={this.handelCancel}>取消</Button>\n              <Button type=\"primary\" loading={loading} onClick={this.handelSave}>\n                保存\n              </Button>\n            </Col>\n          </Row>\n        </Card>\n      </Spin>);\n    }\n}\nexport default SystemTenants;\n"],"file":"SystemTenants.js"}