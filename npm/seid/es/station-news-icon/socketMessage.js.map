{"version":3,"sources":["station-news-icon/socketMessage.jsx"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","PureComponent","Badge","Icon","message","omit","SockJS","Stomp","stompClient","SocketMessage","arguments","state","count","initCount","requestParams","props","userId","groupId","keys","messageJson","JSON","stringify","send","calcCount","result","data","callback","currentCount","setState","unreadQty","messageJudgment","disconnect","redirectToPages","openStationNewsList","socketUrl","socket","over","self","connect","subscribe","res","body","parse","error","console","_a","iconType","iconStyle","fontSize","defaultProps"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { PureComponent } from 'react';\nimport Badge from 'antd/es/badge';\nimport Icon from 'antd/es/icon';\nimport message from 'antd/es/message';\nimport omit from 'lodash/omit';\nimport SockJS from 'sockjs-client';\n// @ts-ignore\nimport { Stomp } from 'stompjs/lib/stomp';\nlet stompClient = null;\nclass SocketMessage extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            count: 0,\n        };\n        // 发送消息\n        this.initCount = () => {\n            const { requestParams } = this.props;\n            const { userId, groupId } = requestParams;\n            if (requestParams && Object.keys(requestParams).length) {\n                const messageJson = JSON.stringify({ userId, groupId });\n                stompClient.send('/mq-app/seo/socket/count', {}, messageJson);\n            }\n        };\n        this.calcCount = (result) => {\n            const { data } = result || {};\n            const { callback } = this.props;\n            const { count } = this.state;\n            let currentCount;\n            if (data) {\n                currentCount = data;\n                this.setState({ count: data.unreadQty });\n            }\n            else {\n                currentCount = result;\n                this.setState({ count: count + result.unreadQty > 0 ? count + result.unreadQty : 0 });\n                currentCount = data.unreadQty;\n            }\n            if (callback)\n                callback(currentCount); // 监听到消息的回调函数\n        };\n        this.messageJudgment = (result) => {\n            const { data } = result || {};\n            if (data)\n                this.initCount();\n        };\n        // 关闭双通道(必须要关闭)\n        this.disconnect = () => {\n            if (stompClient != null) {\n                stompClient.disconnect(() => {\n                    // console.info('关闭成功');\n                });\n            }\n        };\n        this.redirectToPages = () => {\n            // 打开未处理消息的新页签\n            const { openStationNewsList } = this.props;\n            if (openStationNewsList)\n                openStationNewsList();\n        };\n    }\n    componentDidMount() {\n        const { socketUrl, requestParams } = this.props;\n        const { userId, groupId } = requestParams;\n        // 建立连接对象（还未发起连接）\n        const socket = new SockJS(socketUrl);\n        // 获取 STOMP 子协议的客户端对象\n        stompClient = Stomp.over(socket);\n        const self = this;\n        // 向服务器发起websocket连接并发送CONNECT帧\n        stompClient.connect({}, () => {\n            /**\n             * 订阅自己的消息条数对象，若返回的是response.body.data对象，则直接将条数赋值给state，若得到的是response.body,\n             * 则将state与未读条数相加得出的最终未读条数，若读一条，则未读条数为-1（未读数量不能为负数）\n             * {\"deleteQty\":0,\"readQty\":0,\"unreadQty\":0,\"globalQty\":0}\n             */\n            stompClient.subscribe(`/mq-user/${userId}/seo/count`, function (res) {\n                self.calcCount(res.body ? JSON.parse(res.body) : {});\n            });\n            // 订阅自己的未读个人消息，用于实时接收并提示自己收到的个人消息，返回的是消息体本身(个人消息的发送、编辑会被订阅)\n            stompClient.subscribe(`/mq-user/${userId}/seo/inbox`, function (res) {\n                self.messageJudgment(res.body ? JSON.parse(res.body) : {});\n            });\n            /**\n             * 订阅未读的系统消息，用于实时接收并提示收到的系统消息（系统消息的发送与编辑），返回的是消息体本身，若返回消息体，则\n             * 需去获取总的未读消息条数\n             */\n            stompClient.subscribe('/mq-topic/seo/message', function (res) {\n                self.messageJudgment(res.body ? JSON.parse(res.body) : {});\n            });\n            // 订阅自己所在的组的未读消息（消息的读取），返回消息数量\n            stompClient.subscribe(`/mq-user/${groupId}/seo/count`, function (res) {\n                self.calcCount(res.body ? JSON.parse(res.body) : {});\n            });\n            // 订阅自己所在的组的未读消息，用于实时接收并提示自己所在的组收到的消息（消息的发布与编辑），返回消息体，\n            // 若要获取到最新未读条数，需重去获取消息的未读条数\n            stompClient.subscribe(`/mq-user/${groupId}/seo/inbox`, function (res) {\n                self.messageJudgment(res.body ? JSON.parse(res.body) : {});\n            });\n            // 初始化未读条数\n            this.initCount();\n        }, (error) => {\n            console.error('error', error);\n            // 连接失败时（服务器响应 ERROR 帧）的回调方法\n            message.error('连接失败');\n        });\n    }\n    componentWillUnmount() {\n        this.disconnect();\n    }\n    render() {\n        const _a = this.props, { iconType, iconStyle } = _a, props = __rest(_a, [\"iconType\", \"iconStyle\"]);\n        const { count } = this.state;\n        return (<div onClick={this.redirectToPages}>\n        <Badge count={count} {...omit(props, [\n            'targetUrl',\n            'socketUrl',\n            'callback',\n            'requestParams',\n            'openStationNewsList',\n            'timeInterval',\n        ])}>\n          <Icon type={iconType} style={Object.assign({ fontSize: 32 }, iconStyle)}/>\n        </Badge>\n      </div>);\n    }\n}\nSocketMessage.defaultProps = {\n    iconType: 'bell',\n};\nexport default SocketMessage;\n"],"file":"socketMessage.js"}